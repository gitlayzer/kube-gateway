# 工作流的名称
name: Go Release Binary Builder

# 触发工作流的事件
on:
  push:
    # 只有当一个符合 'v*.*.*' 格式的 tag 被推送到仓库时，才触发此工作流
    # 例如：v1.0.0, v1.2.3
    tags:
      - 'v*.*.*'

# 定义工作流中的任务
jobs:
  build-and-release:
    # 指定运行此任务的虚拟机环境
    runs-on: ubuntu-latest

    # 定义任务中的各个步骤
    steps:
      # 第一步：检出（拉取）你的代码
      # 使用 actions/checkout@v3 这个官方 action
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # 拉取所有历史记录，以便 git describe 能正常工作
          fetch-depth: 0

      # 第二步：设置 Go 语言环境
      # 使用 actions/setup-go@v4 这个官方 action
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      # 第三步：构建 Linux 版本的二进制文件
      # 我们直接复用 Makefile 中的命令，保持本地和 CI 构建的一致性
      - name: Build for Linux
        run: make build-linux

      # 第四步：创建 Release 并上传构建产物
      # 使用一个非常流行的 action `softprops/action-gh-release`
      # 它会自动为你的 tag 创建一个 GitHub Release，并把文件作为附件上传
      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v1
        with:
          # 要上传的文件列表。我们的 Makefile 会生成一个名为 'kube-gateway' 的文件
          files: ./kube-gateway
        env:
          # GitHub Actions 会自动提供这个 GITHUB_TOKEN，用于授权
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}